(import (chez-stats chez-stats)
	(srfi s64 testing))

;; csv

(test-begin "csv-test")
(define example-list (list
		      (list "col1" "col2" "col3" "col4")
		      (list 10.02 #\A "1,000" "Glen \"Big Baby\" Davis")
		      (list 1/3 #\B "1000" "Earvin \"Magic\" Johnson")))
(write-csv example-list "example.csv" #f)
(test-error (write-csv example-list "example.csv" #f))
;; if example-list was all string wouldn't need to jump through these extra hoops
(define example-list2 (read-csv "example.csv"))
(write-csv example-list2 "example2.csv" #f)
(test-equal example-list2 (read-csv "example2.csv"))
(test-equal (reverse (cdr (reverse example-list2))) (preview-csv "example2.csv" 2))
(delete-file "example.csv")
(delete-file "example2.csv")
(test-end "csv-test")

;; dataframe

(define df1 (make-dataframe '((a (1 2 3)) (b (4 5 6)))))
(define df2 (make-dataframe '((a (1 2 3)) (b (4 5 6)) (c (7 8 9)))))

(test-begin "thread-test")
(test-equal 12 (-> '(1 2 3) (mean) (+ 10)))
;; (test-assert (dataframe-equal? df2 (-> df1 (dataframe-add 'c '(7 8 9)))))
;; (test-assert (dataframe-equal? df1 (-> df1
;; 					(dataframe-add 'c '(7 8 9))
;; 					(dataframe-drop 'c))))
(test-approximate 0 (-> (random-binomial 1e5 10 0.5) (variance) (- 2.5)) 0.125)
(test-error (-> '(4 3 5 1) (sort <)))
(test-end "thread-test")

(test-begin "dataframe?-test")
(test-assert (dataframe? df1))
(test-assert (not (dataframe? '((a (1 2 3)) (b (4 5 6))))))
(test-end "dataframe?-test")

(test-begin "dataframe-alist-test")
(test-equal '((a (1 2 3)) (b (4 5 6))) (dataframe-alist df1))
(test-error (dataframe-alist '((a (1 2 3)) (b (4 5 6)))))
(test-end "dataframe-alist-test")

(define df3 (make-dataframe '((a (1 2 3 1 2 3)) (b (4 5 6 4 5 6)) (c (-999 -999 -999 7 8 9)))))
(define df4 (make-dataframe '((a (1 2 3 1 2 3)) (b (4 5 6 4 5 6)) (c (7 8 9 -999 -999 -999)))))

(test-begin "dataframe-append-all-test")
(test-assert (dataframe-equal? df3 (dataframe-append-all -999 df1 df2)))
(test-assert (dataframe-equal? df4 (dataframe-append-all -999 df2 df1)))
(test-error (dataframe-append-all -999 df3 df4 '(1 2 3)))
(test-end "dataframe-append-all-test")

(test-begin "dataframe-contains?-test")
(test-assert (dataframe-contains? df1 'b))
(test-assert (dataframe-contains? df1 'a 'b))
(test-assert (not (dataframe-contains? df1 'a 'b 'c)))
(test-assert (not (dataframe-contains? df1 "b")))
(test-error (dataframe-contains? df1 b))
(test-end "dataframe-contains?-test")

(test-begin "dataframe-dim-test")
(test-equal (cons 3 2) (dataframe-dim df1))
(test-error (dataframe-dim '(1 2 3)))
(test-end "dataframe-dim-test")

(define df5 (make-dataframe '((a (1 2 3)) (b (4 5 6)) (c (7 8 9)))))
(define df6 (make-dataframe '((b (4 5 6)) (c (7 8 9)))))
(define df7 (make-dataframe '((c (7 8 9)))))

(test-begin "dataframe-drop-test")
(test-error (dataframe-drop df5 'd))
(test-assert (dataframe-equal? df6 (dataframe-drop df2 'a)))
(test-assert (dataframe-equal? df7 (dataframe-drop df2 'a 'b)))
(test-end "dataframe-drop-test")

(test-begin "dataframe-equal?-test")
(test-assert (dataframe-equal? df2))
(test-assert (dataframe-equal? df2 df5))
(test-assert (not (dataframe-equal? df5 df6)))
(test-error (dataframes-equal df2 '((a (1 2 3)))))
(test-end "dataframe-equal?-test")

(test-begin "dataframe-head-test")
(test-assert (dataframe-equal? df2 (dataframe-head df4 3)))
(test-error (dataframe-head '(1 2 3) 3))
(test-error (dataframe-head df2 10))
(test-error (dataframe-head df2 0.5))
(test-end "dataframe-head-test")

(test-begin "dataframe-names-test")
(test-equal '(a b c) (dataframe-names df5))
(test-equal '(b c) (dataframe-names df6))
(test-equal '(c) (dataframe-names df7))
(test-end "dataframe-names-test")

(define df8 (make-dataframe '((a (1 2 3)) (b (4 5 6)) (scary7 (7 8 9)))))
(define df9 (make-dataframe '((A (1 2 3)) (b (4 5 6)) (scary7 (7 8 9)))))

(test-begin "dataframe-rename-test")
(test-assert (dataframe-equal? df8 (dataframe-rename df5 '((c scary7)))))
(test-assert (dataframe-equal? df9 (dataframe-rename df5 '((a A) (c scary7)))))
;; same dataframe is returned when old names are not found
(test-assert (dataframe-equal? df8 (dataframe-rename df8 '((d D)))))
(test-error (dataframe-rename 100 '((a A))))
(test-error (dataframe-rename df5 '((a c))))
(test-end "dataframe-rename-test")

(test-begin "dataframe-select-test")
(test-error (dataframe-select df8 'd))
(test-assert (dataframe-equal? df6 (dataframe-select df2 'b 'c)))
(test-assert (dataframe-equal? df7 (dataframe-select df2 'c)))
(test-end "dataframe-select-test")

(define df10 (make-dataframe '((a (100 200 300)) (b (4 5 6)) (c (700 800 900)))))

(test-begin "dataframe-update-test")
(test-error (dataframe-update df5 (lambda (x) (* x 100)) 'd))
(test-assert (dataframe-equal? df10 (dataframe-update df5 (lambda (x) (* x 100)) 'a 'c)))
(test-error (dataframe-update df5 (lambda (x) (* x 100)) 'a 'c 'd))
(test-error (dataframe-update df5 "test" 'a))
(test-end "dataframe-update-test")

(test-begin "dataframe-values-test")
(test-equal '(100 200 300) (dataframe-values df10 'a))
(test-equal '(4 5 6) (dataframe-values df10 'b))
(test-error (dataframe-values df10 'd))
(test-error (dataframe-values 100 'a))
(test-error (dataframe-values df10 'a 'b))
(test-end "dataframe-values-test")

;; (test-begin "$-test")
;; (test-equal '(100 200 300) ($ df10 'a))
;; (test-equal '(4 5 6) ($ df10 'b))
;; (test-error ($ df10 'd))
;; (test-error ($ 100 'a))
;; (test-error ($ df10 'a 'b))
;; (test-end "$-test")

(test-begin "make-dataframe-test")
(test-error (make-dataframe 100))
(test-error (make-dataframe '()))
(test-error (make-dataframe '(1 2 3)))
(test-error (make-dataframe '(("a" (1 2 3)))))
(test-error (make-dataframe '((a (1 2 3)) (a (1 2 3)))))
(test-error (make-dataframe '((a 10))))
;; (test-error (make-dataframe '((a (1 (2) 3)))))
(test-error (make-dataframe '((a (1 2 3)) (b (1 2 3 4)))))
(test-end "make-dataframe-test")

(define df11 (make-dataframe '((a (100 200 300)) (b (4 5 6)) (c (700 800 900)) (d (104 205 306)))))
(define df12 (make-dataframe '((a (100 200 300)) (b (4 5 6)) (c (700 800 900)) (d (400 500 600)))))
(define df13 (make-dataframe '((a (100 200 300)) (b (4 5 6)) (c (700 800 900)) (d ("100_4" "200_5" "300_6")))))

(test-begin "dataframe-add-test")
(test-error (dataframe-add df10 'c (lambda (a b) (+ a b)) 'a 'b 'c))
(test-error (dataframe-add df10 'd (lambda (a b) (+ a b)) 'a 'd))
(test-error (dataframe-add df10 'c (lambda (a b) (+ a b)) 'a 'b))
(test-error (dataframe-add df10 "d" (lambda (a b) (+ a b)) 'a 'b))
(test-error (dataframe-add 10 'd (lambda (a b) (+ a b)) 'a 'b))
(test-assert (dataframe-equal? df11 (dataframe-add df10 'd (lambda (a b) (+ a b)) 'a 'b)))
(test-assert (dataframe-equal? df12 (dataframe-add df10 'd (lambda (a c) (/ (+ a c) 2)) 'a 'c)))
(test-assert (dataframe-equal? df13 (dataframe-add df10
                                                   'd
                                                   (lambda (a b)
                                                     (string-append
                                                      (number->string a) "_"
                                                      (number->string b)))
                                                   'a 'b)))
(test-end "dataframe-add-test")

(define df14 (make-dataframe '((a (200 300)) (b (5 6)) (c (800 900)))))
(define df15 (make-dataframe '((a (200)) (b (5)) (c (800)))))

(test-begin "dataframe-filter-test")
(test-assert (dataframe-equal? df14 (dataframe-filter df10 (lambda (a) (> a 100)) 'a)))
(test-assert (dataframe-equal? df15 (dataframe-filter df10 (lambda (b) (= b 5)) 'b)))
(test-assert (dataframe-equal? df15 (dataframe-filter df10 (lambda (a b) (or (odd? a) (odd? b))) 'a 'b)))
(test-error (dataframe-filter 'A (lambda (b) (odd? b)) 'b))
(test-error (dataframe-filter df10 (lambda (d) (odd? d)) 'd))
(test-error (dataframe-filter df10 10 'a))
(test-end "dataframe-filter-test")

(define df16 (make-dataframe '((a (200)) (b (5)) (c (800)))))
(define df17 (make-dataframe '((a (100 300)) (b (4 6)) (c (700 900)))))

(test-begin "dataframe-partition-test")
(define-values (part1 part2) (dataframe-partition df10 (lambda (b) (odd? b)) 'b))
(test-assert (dataframe-equal? part1 df16))
(test-assert (dataframe-equal? part2 df17))
(test-error (dataframe-partition 'A (lambda (b) (odd? b)) 'b))
(test-error (dataframe-partition df10 (lambda (b) (odd? b)) 'd))
(test-error (dataframe-partition df10 10 'b))
(test-end "dataframe-partition-test")

(test-begin "df-read-write-test")
(dataframe-write df10 "example.scm" #f)
(test-error (dataframe-write df10 "example.scm" #f))
(test-assert (dataframe-equal? df10 (dataframe-read "example.scm")))
(delete-file "example.scm")
(test-end "df-read-write-test")

(define df18 (make-dataframe '((a (1 2 3 1 2 3)) (b (4 5 6 4 5 6)))))
(define df19 (make-dataframe '((c (1 2 3)))))

(test-begin "dataframe-append-test")
(test-assert (dataframe-equal? df18 (dataframe-append df1 df2)))
(test-assert (dataframe-equal? df18 (dataframe-append df2 df1)))
(test-error (dataframe-append df1 df19))
(test-error (dataframe-append-all df3 df4 '(1 2 3)))
(test-end "dataframe-append-test")

(test-begin "dataframe->listtable-test")
(test-error (dataframe->listtable 100))
(test-equal '((a b c) (100 4 700) (300 6 900)) (dataframe->listtable df17))
(test-equal '((c) (1) (2) (3)) (dataframe->listtable df19))
(test-end "dataframe->listtable-test")

(define df20 (make-dataframe '((trt (A A A B B B)) (grp (A B A B A B)) (resp (1 2 3 4 5 6)))))
(define df21 (make-dataframe '((trt (A A B B)) (grp (B A A B)))))

(test-begin "dataframe-unique-test")
(test-error (dataframe-unique '((a (1 2 3)))))
(test-assert (dataframe-equal? df21 (dataframe-unique (dataframe-select df20 'trt 'grp))))
(test-end "dataframe-unique-test")

;; random-variates

(test-begin "bernoulli-test")
(define bernoulli-list (random-bernoulli 1e5 0.2))
(test-approximate 0.2 (mean bernoulli-list) 0.01)
(test-approximate 0.16 (variance bernoulli-list) 0.008)
(test-error (random-bernoulli -2 0.2))
(test-error (random-bernoulli 2 1.2))
(test-end "bernoulli-test")

(test-begin "beta-test")
(define beta-list (random-beta 1e5 1 3))
(test-approximate 0.25 (mean beta-list) 0.0125)
(test-approximate 0.037 (variance beta-list) 0.00185)
(test-error (random-beta -7 1 3))
(test-error (random-beta 2 -7 3))
(test-error (random-beta 2 1 'a))
(test-end "beta-test")

(test-begin "beta-binomial-test")
(define beta-binomial-list (random-beta-binomial 1e5 10 0.5 1.0001))
(test-approximate 5 (mean beta-binomial-list) 0.25)
(test-approximate 2.5 (variance beta-binomial-list) 0.125)
(test-error (random-beta-binomial -7 10 0.5 5))
(test-error (random-beta-binomial 2 10.3 0.5 5))
(test-error (random-beta-binomial 2 10 0 5))
(test-error (random-beta-binomial 2 10 0.8 0))
(test-error (random-beta-binomial 2 10 0.8 11))
(test-end "beta-binomial-test")

(test-begin "binomial-test")
(define binomial-list (random-binomial 1e5 10 0.5))
(test-approximate 5 (mean binomial-list) 0.25)
(test-approximate 2.5 (variance binomial-list) 0.125)
(test-error (random-binomial -2 10 0.5))
(test-error (random-binomial 2 -2 0.5))
(test-error (random-bionmial 2 2 1.2))
(test-end "binomial-test")

(test-begin "exponential-test")
(define exponential-list (random-exponential 1e5 10))
(test-approximate 10 (mean exponential-list) 0.5)
(test-approximate 100 (variance exponential-list) 5)
(test-error (random-exponential -2 10))
(test-error (random-exponential 2 -2))
(test-end "exponential-test")

(test-begin "gamma-test")
(define gamma-list (random-gamma 1e5 10 2))
(test-approximate 5 (mean gamma-list) 0.25)
(test-approximate 2.5 (variance gamma-list) 0.125)
(test-error (random-gamma 1.3 10 2))
(test-error (random-gamma 2 -7 2))
(test-error (random-gamma 2 10 "travis"))
(test-end "gamma-test")

(test-begin "geometric-test")
(define geometric-list (random-geometric 1e5 0.2))
(test-approximate 5 (mean geometric-list) 0.25)
(test-approximate 20 (variance geometric-list) 1)
(test-error (random-geometric -1 0.2))
(test-error (random-geometric 2 1))
(test-end "geometric-test")

(test-begin "lognormal-test")
(define lognormal-list (random-lognormal 1e5 2 1))
(test-approximate 12.28 (mean lognormal-list) 0.614)
(test-approximate 16 (standard-deviation lognormal-list) 0.8)
(test-error (random-lognormal -999 2 1))
(test-error (random-lognormal 2 "a" 1))
(test-error (random-lognormal 2 2 -1))
(test-end "lognormal-test")

(test-begin "multinomial-test")
(define multinomial-list (random-multinomial 1e5 '(0.05 0.45 0.45 0.05)))
(define ml-sum (apply + multinomial-list))
(test-equal 100000 ml-sum)
(test-approximate 1 (apply + (map (lambda (x) (/ x ml-sum)) multinomial-list)) 0.01)
(test-equal 100 (apply + (random-multinomial 100 '(50 50))))
(test-equal '(100) (random-multinomial 100 '(1)))
(test-error (random-multinomial 'a '(0.5 0.5)))
(test-error (random-multinomial 100 'b))
(test-end "multinomial-test")

(test-begin "negative-binomial-test")
(define negative-binomial-list (random-negative-binomial 1e5 10 0.2))
(test-approximate 40 (mean negative-binomial-list) 2)
(test-approximate 201 (variance negative-binomial-list) 10.05)
(test-error (random-negative-binomial 3.3 10 0.2))
(test-error (random-negative-binomial 2 10 0))
(test-error (random-negative-binomial 2 0 0.2))
(test-end "negative-binomial-test")

(test-begin "normal-test")
(define normal-list (random-normal 1e5 42 5))
(test-approximate 42 (mean normal-list) 2.1)
(test-approximate 5 (standard-deviation normal-list) 0.25)
(test-error (random-normal -2 42 5))
(test-error (random-normal 2 "a" 5))
(test-error (random-normal 2 2 -5))
(test-end "normal-test")

(test-begin "pareto-test")
(define pareto-list (random-pareto 1e5 5))
(test-approximate 1.25 (mean pareto-list) 0.0625)
(test-approximate 0.104 (variance pareto-list) 0.005)
(test-error (random-pareto -10.5 10))
(test-error (random-pareto 10 -2))
(test-end "pareto-test")

(test-begin "poisson-test")
(define poisson-list (random-poisson 1e5 7))
(test-approximate 7 (mean poisson-list) 0.35)
(test-approximate 7 (variance poisson-list) 0.35)
(test-error (random-normal -2 7))
(test-error (random-normal 2 -10))
(test-end "poisson-test")

(test-begin "uniform-test")
(define uniform-list (random-uniform 1e5 -10 7))
(test-approximate -10 (apply min uniform-list) 0.01)
(test-approximate 7 (apply max uniform-list) 0.01)
(test-error (random-uniform -7 0 1))
(test-error (random-uniform 2 'a 1))
(test-error (random-uniform 2 2 1))
(test-end "uniform-test")

;; statistics

(test-begin "count-test")
(test-equal '((1 2 3 4) (2 2 1 1)) (count '(1 2 3 4 2 1)))
(test-equal '((1 1.1 2 2.2) (1 3 1 1)) (count '(1.1 1 2.2 2 1.1 1.1)))
(test-equal '((1/2 1 2) (3 2 1)) (count '(0.5 1/2 #e0.5 1 1 2)))
(test-error (count '("a" "b" "b" "a")))
(test-end "count-test")

(test-begin "cumulative-sum-test")
(test-equal '(1 3 6 10 15) (cumulative-sum '(1 2 3 4 5)))
(test-equal '(5 9 12 14 15) (cumulative-sum '(5 4 3 2 1)))
(test-error (cumulative-sum '()))
(test-end "cumulative-sum-test")

(test-begin "ecdf-test")
(test-equal '((1 5 10) (1/5 4/5 1)) (ecdf '(1 5 5 5 10)))
(test-equal '((0.5 2 2.5 4 5) (1/6 1/2 2/3 5/6 1)) (ecdf '(0.5 2 2 2.5 4 5)))
(test-equal '((0.5 10 20) (1/3 5/6 1)) (ecdf '(1/2 0.5 10 10 10 20)))
(test-error (ecdf "a"))
(test-end "ecdf-test")

(test-begin "interquartile-range")
(test-assert (= 2.5 (interquartile-range '(1 2 3 4 5 6) 7)))
(test-error (interquartile-range '(1) 100))
(test-end "interquartile-range")

(test-begin "kurtosis-test")
(test-assert (= 17/10 (kurtosis '(1 2 3 4 5))))
(test-assert (= 51/25 (kurtosis '(1 2 2 3 3 3))))
(test-error (kurtosis '()))
(test-error (kurtosis "a"))
(test-end "kurtosis-test")

(test-begin "mean-test")
(test-assert (= 3 (mean '(1 2 3 4 5))))
(test-assert (= 0 (mean '(-10 0 10))))
(test-assert (= 27.5 (exact->inexact (mean '(1 2 3 4 5 150)))))
(test-error (mean '()))
(test-error (mean "a"))
(test-end "mean-test")

(test-begin "median-test")
(test-assert (= 3.5 (median '(1 2 3 4 5 6))))
(test-error (median '()))
(test-error (median '("a")))
(test-end "median-test")

(test-begin "mode-test")
(test-equal '(1 2) (mode '(1 1 1 2 2 2)))
(test-equal '(4) (mode '(1 2 3 3 4 4 4)))
(test-error (mode 'a))
(test-end "mode-test")

(test-begin "quantile-test")
(test-assert (= 3 (quantile '(1 2 3 4 5 6) 0.5 1)))
(test-assert (= 3.0 (quantile '(1 2 3 4 5 6) 0.5 4)))
(test-assert (= 3.5 (quantile '(1 2 3 4 5 6) 0.5 8)))
(test-assert (= 1.125 (quantile '(1 2 3 4 5 6) 0.025 7)))
(test-error (quantile '(1 2) 0.5 100))
(test-error (quantile '(1 2) 2 7))
(test-end "quantile-test")

(test-begin "range-test")
(test-equal (cons 1 5) (range '(1 2 3 4 5)))
(test-equal (cons -99 100) (range '(-10 -7 3 -99 100)))
(test-error (range '()))
(test-end "range-test")

(test-begin "skewness-test")
(test-assert (= 0 (skewness '(1 2 3 4 5))))
(test-assert (= -0.6 (skewness '(1 2 2 3 3 3 4 4 4 4))))
(test-error (skewness '()))
(test-error (skewness '("a" 1)))
(test-end "skewness-test")

(test-begin "standard-deviation-test")
(test-assert (= 1.8708286933869707 (standard-deviation '(0 1 2 3 4 5))))
(test-assert (= 0 (standard-deviation '(1 1 1))))
(test-error (standard-deviation '(1 'a)))
(test-end "standard-deviation-test")

(test-begin "unique-test")
(test-equal '(1/2 1 5.2) (unique '(0.5 #e0.5 1/2 1 1 1 5.2)))
(test-equal '(0 1 2) (unique '(0 0 0 1 1 1 2)))
(test-error (unique 'a))
(test-end "unique-test")

(test-begin "variance-test")
(test-assert (= 233840.25 (variance '(1 10 100 1000))))
(test-assert (= 3.5 (variance '(0 1 2 3 4 5))))
(test-error (variance '()))
(test-end "variance-test")

(test-begin "weighted-mean-test")
(test-assert (= 7/3 (weighted-mean '(1 2 3 4 5) '(5 4 3 2 1))))
(test-assert (= 3 (weighted-mean '(1 2 3 4 5) '(2 2 2 2 2))))
(test-assert (= 13/4 (weighted-mean '(1 2 3 4 5) '(2 0 2 2 2))))
(test-error (weighted-mean '() '(1 2 3)))
(test-error (weighted-mean '(1) '(1 2 3)))
(test-error (weighted-mean '(1) '(1 2 "a")))
(test-end "weighted-mean-test")

(exit (if (zero? (test-runner-fail-count (test-runner-get))) 0 1))


