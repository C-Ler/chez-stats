;; run this file from terminal with
;; > chez path/to/tests.ss

(import (chez-stats statistics)
	(chez-stats random-variates)
	(srfi s64 testing))

;; Descriptive Statistics

(test-begin "count-test")
(test-equal (list '(1 2 3 4) '(2 2 1 1)) (count '(1 2 3 4 2 1)))
(test-equal (list '(1 1.1 2 2.2) '(1 3 1 1)) (count '(1.1 1 2.2 2 1.1 1.1)))
(test-equal (list '(1/2 1 2) '(3 2 1)) (count '(0.5 1/2 #e0.5 1 1 2)))
(test-error (count '("a" "b" "b" "a")))
(test-end "count-test")

(test-begin "cumulative-sum-test")
(test-equal '(1 3 6 10 15) (cumulative-sum '(1 2 3 4 5)))
(test-equal '(5 9 12 14 15) (cumulative-sum '(5 4 3 2 1)))
(test-error (cumulative-sum '()))
(test-end "cumulative-sum-test")

(test-begin "ecdf-test")
(test-equal (list '(1 5 10) '(1/5 4/5 1)) (ecdf '(1 5 5 5 10)))
(test-equal (list '(0.5 2 2.5 4 5) '(1/6 1/2 2/3 5/6 1)) (ecdf '(0.5 2 2 2.5 4 5)))
(test-equal (list '(0.5 10 20) '(1/3 5/6 1)) (ecdf '(1/2 0.5 10 10 10 20)))
(test-error (ecdf "a"))
(test-end "ecdf-test")

(test-begin "interquartile-range")
(test-assert (= 2.5 (interquartile-range '(1 2 3 4 5 6) 7)))
(test-error (interquartile-range '(1) 100))
(test-end "interquartile-range")

(test-begin "kurtosis-test")
(test-assert (= 17/10 (kurtosis '(1 2 3 4 5))))
(test-assert (= 51/25 (kurtosis '(1 2 2 3 3 3))))
(test-error (kurtosis '()))
(test-error (kurtosis "a"))
(test-end "kurtosis-test")

(test-begin "mean-test")
(test-assert (= 3 (mean '(1 2 3 4 5))))
(test-assert (= 0 (mean '(-10 0 10))))
(test-assert (= 27.5 (exact->inexact (mean '(1 2 3 4 5 150)))))
(test-error (mean '()))
(test-error (mean "a"))
(test-end "mean-test")

(test-begin "median-test")
(test-assert (= 3.5 (median '(1 2 3 4 5 6))))
(test-error (median '()))
(test-error (median '("a")))
(test-end "median-test")

(test-begin "mode-test")
(test-equal '(1 2) (mode '(1 1 1 2 2 2)))
(test-equal '(4) (mode '(1 2 3 3 4 4 4)))
(test-error (mode 'a))
(test-end "mode-test")

(test-begin "quantile-test")
(test-assert (= 3 (quantile '(1 2 3 4 5 6) 0.5 1)))
(test-assert (= 3.0 (quantile '(1 2 3 4 5 6) 0.5 4)))
(test-assert (= 3.5 (quantile '(1 2 3 4 5 6) 0.5 8)))
(test-assert (= 1.125 (quantile '(1 2 3 4 5 6) 0.025 7)))
(test-error (quantile '(1 2) 0.5 100))
(test-error (quantile '(1 2) 2 7))
(test-end "quantile-test")

(test-begin "range-test")
(test-equal (cons 1 5) (range '(1 2 3 4 5)))
(test-equal (cons -99 100) (range '(-10 -7 3 -99 100)))
(test-error (range '()))
(test-end "range-test")

(test-begin "skewness-test")
(test-assert (= 0 (skewness '(1 2 3 4 5))))
(test-assert (= -0.6 (skewness '(1 2 2 3 3 3 4 4 4 4))))
(test-error (skewness '()))
(test-error (skewness '("a" 1)))
(test-end "skewness-test")

(test-begin "standard-deviation-test")
(test-assert (= 1.8708286933869707 (standard-deviation '(0 1 2 3 4 5))))
(test-assert (= 0 (standard-deviation '(1 1 1))))
(test-error (standard-deviation '(1 'a)))
(test-end "standard-deviation-test")

(test-begin "unique-test")
(test-equal '(1/2 1 5.2) (unique '(0.5 #e0.5 1/2 1 1 1 5.2)))
(test-equal '(0 1 2) (unique '(0 0 0 1 1 1 2)))
(test-error (unique 'a))
(test-end "unique-test")

(test-begin "variance-test")
(test-assert (= 233840.25 (variance '(1 10 100 1000))))
(test-assert (= 3.5 (variance '(0 1 2 3 4 5))))
(test-error (variance '()))
(test-end "variance-test")

(test-begin "weighted-mean-test")
(test-assert (= 7/3 (weighted-mean '(1 2 3 4 5) '(5 4 3 2 1))))
(test-assert (= 3 (weighted-mean '(1 2 3 4 5) '(2 2 2 2 2))))
(test-assert (= 13/4 (weighted-mean '(1 2 3 4 5) '(2 0 2 2 2))))
(test-error (weighted-mean '() '(1 2 3)))
(test-error (weighted-mean '(1) '(1 2 3)))
(test-error (weighted-mean '(1) '(1 2 "a")))
(test-end "weighted-mean-test")

;; Random Variates

(test-begin "bernoulli-test")
(define bernoulli-list (random-bernoulli 1e5 0.2))
(test-approximate 0.2 (mean bernoulli-list) 0.01)
(test-approximate 0.16 (variance bernoulli-list) 0.008)
(test-error (random-bernoulli -2 0.2))
(test-error (random-bernoulli 2 1.2))
(test-end "bernoulli-test")

(test-begin "beta-test")
(define beta-list (random-beta 1e5 1 3))
(test-approximate 0.25 (mean beta-list) 0.0125)
(test-approximate 0.037 (variance beta-list) 0.00185)
(test-error (random-beta -7 1 3))
(test-error (random-beta 2 -7 3))
(test-error (random-beta 2 1 'a))
(test-end "beta-test")

(test-begin "beta-binomial-test")
(define beta-binomial-list (random-beta-binomial 1e5 10 0.5 1.0001))
(test-approximate 5 (mean beta-binomial-list) 0.25)
(test-approximate 2.5 (variance beta-binomial-list) 0.125)
(test-error (random-beta-binomial -7 10 0.5 5))
(test-error (random-beta-binomial 2 10.3 0.5 5))
(test-error (random-beta-binomial 2 10 0 5))
(test-error (random-beta-binomial 2 10 0.8 0))
(test-error (random-beta-binomial 2 10 0.8 11))
(test-end "beta-binomial-test")

(test-begin "binomial-test")
(define binomial-list (random-binomial 1e5 10 0.5))
(test-approximate 5 (mean binomial-list) 0.25)
(test-approximate 2.5 (variance binomial-list) 0.125)
(test-error (random-binomial -2 10 0.5))
(test-error (random-binomial 2 -2 0.5))
(test-error (random-bionmial 2 2 1.2))
(test-end "binomial-test")

(test-begin "exponential-test")
(define exponential-list (random-exponential 1e5 10))
(test-approximate 10 (mean exponential-list) 0.5)
(test-approximate 100 (variance exponential-list) 5)
(test-error (random-exponential -2 10))
(test-error (random-exponential 2 -2))
(test-end "exponential-test")

(test-begin "gamma-test")
(define gamma-list (random-gamma 1e5 10 2))
(test-approximate 5 (mean gamma-list) 0.25)
(test-approximate 2.5 (variance gamma-list) 0.125)
(test-error (random-gamma 1.3 10 2))
(test-error (random-gamma 2 -7 2))
(test-error (random-gamma 2 10 "travis"))
(test-end "gamma-test")

(test-begin "geometric-test")
(define geometric-list (random-geometric 1e5 0.2))
(test-approximate 5 (mean geometric-list) 0.25)
(test-approximate 20 (variance geometric-list) 1)
(test-error (random-geometric -1 0.2))
(test-error (random-geometric 2 1))
(test-end "geometric-test")

(test-begin "lognormal-test")
(define lognormal-list (random-lognormal 1e5 2 1))
(test-approximate 12.28 (mean lognormal-list) 0.614)
(test-approximate 16 (standard-deviation lognormal-list) 0.8)
(test-error (random-lognormal -999 2 1))
(test-error (random-lognormal 2 "a" 1))
(test-error (random-lognormal 2 2 -1))
(test-end "lognormal-test")

(test-begin "negative-binomial-test")
(define negative-binomial-list (random-negative-binomial 1e5 10 0.2))
(test-approximate 40 (mean negative-binomial-list) 2)
(test-approximate 201 (variance negative-binomial-list) 10.05)
(test-error (random-negative-binomial 3.3 10 0.2))
(test-error (random-negative-binomial 2 10 0))
(test-error (random-negative-binomial 2 0 0.2))
(test-end "negative-binomial-test")

(test-begin "normal-test")
(define normal-list (random-normal 1e5 42 5))
(test-approximate 42 (mean normal-list) 2.1)
(test-approximate 5 (standard-deviation normal-list) 0.25)
(test-error (random-normal -2 42 5))
(test-error (random-normal 2 "a" 5))
(test-error (random-normal 2 2 -5))
(test-end "normal-test")

(test-begin "pareto-test")
(define pareto-list (random-pareto 1e5 5))
(test-approximate 1.25 (mean pareto-list) 0.0625)
(test-approximate 0.104 (variance pareto-list) 0.005)
(test-error (random-pareto -10.5 10))
(test-error (random-pareto 10 -2))
(test-end "pareto-test")

(test-begin "poisson-test")
(define poisson-list (random-poisson 1e5 7))
(test-approximate 7 (mean poisson-list) 0.35)
(test-approximate 7 (variance poisson-list) 0.35)
(test-error (random-normal -2 7))
(test-error (random-normal 2 -10))
(test-end "poisson-test")

(test-begin "uniform-test")
(define uniform-list (random-uniform 1e5 -10 7))
(test-approximate -10 (apply min uniform-list) 0.01)
(test-approximate 7 (apply max uniform-list) 0.01)
(test-error (random-uniform -7 0 1))
(test-error (random-uniform 2 'a 1))
(test-error (random-uniform 2 2 1))
(test-end "uniform-test")



